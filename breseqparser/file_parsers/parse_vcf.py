from pathlib import Path
from typing import Dict, Optional

import pandas
import vcf


class VCFColumns:
	sample_name = 'sampleName'
	sequence_id = 'seq id'
	position = 'position'
	alternate = 'alt'
	reference = 'ref'
	quality = 'quality'
	depth = 'readDepth'
	variant_type = 'variantType'


def get_vcf_filename(path: Path) -> Path:
	""" Attempts to locate the vcf file in the outputfolder generated by breseq.
		Parameters
		----------
		path: Path
			The folder generated by breseq.
		Returns
		-------
		Path
			The vcf file generated by breseq.
	"""
	if path.is_dir():
		result = path / "data" / "output.vcf"
		if not result.exists():
			candidates = list(path.glob("**/output.vcf"))
			if len(candidates) != 1:
				message = f"Invalid vcf file path: {path}"
				raise FileNotFoundError(message)
			result = candidates[0]
	elif path.suffix == '.vcf':
		result = path
	else:
		message = f"Invalid VCF path: {path}"
		raise ValueError(message)
	return result


def convert_record_to_dictionary(record) -> Dict[str, str]:
	alt = "".join(str(i) for i in record.ALT)
	ref = "".join(str(i) for i in record.REF)
	qual = record.QUAL
	depth = record.INFO.get('DP')
	row = {
		VCFColumns.sequence_id:  record.CHROM,
		VCFColumns.position:     record.POS,
		VCFColumns.alternate:    alt,
		VCFColumns.reference:    ref,
		VCFColumns.quality:      qual,
		VCFColumns.depth:        depth,
		VCFColumns.variant_type: record.var_type
	}
	return row


def parse_vcf(path: Path, name: Optional[str] = None) -> pandas.DataFrame:
	"""
		Converts the VCF file generated by breseq into a pandas Dataframe.
	Parameters
	----------
	path: Path
		Either a folder containing a single breseq run or a path to the vcf file itself.
	name: Optional[str]
		The name of the sample will be added as the `sampleName` column if provided.
	Returns
	-------
	pandas.DataFrame
	- Index -> (VCFColumns.sample_name, VCFColumns.sequence_id, VCFColumns.position)
	- Columns-> VCFColumns
	"""
	name = name if name else "n/a"
	filename = get_vcf_filename(path)
	table = list()
	with filename.open('r') as file1:
		vcf_reader = vcf.Reader(file1)
		table += [convert_record_to_dictionary(record) for record in vcf_reader]

	# Columns are defined in VCFColumns
	df = pandas.DataFrame(table)

	df[VCFColumns.sample_name] = name
	# Filter out variants that occur within 1000b bo of each other.
	df = filter_df(df)
	df = df.set_index(keys = [VCFColumns.sample_name, VCFColumns.sequence_id, VCFColumns.position])

	return df


def filter_df(df: pandas.DataFrame) -> pandas.DataFrame:
	""" Filters out variants that occur within 1000bp of each other."""
	forward = df['position'].diff().abs()
	reverse = df['position'][::-1].diff()[::-1].abs()

	fdf = df[(forward > 1000) | (reverse > 1000)]
	return fdf


if __name__ == "__main__":
	data_folder = Path(__file__).parent.parent / "tests" / "breseq_run" / "AU0074" / "breseq_output" / "data" / "output.vcf"

	d = parse_vcf(data_folder)
	print(d)
