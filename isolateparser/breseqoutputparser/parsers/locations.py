""" Implements the logic to find specific files in a breseq folder."""
from pathlib import Path
from typing import Tuple, Optional
from loguru import logger
def get_index_filename(path: Path) -> Path:
	path = Path(path)

	if path.suffix == '.html':
		return path

	expected_index_file = path / "output" / "index.html"

	if not expected_index_file.exists():
		candidates = list(path.glob("**/*index.html"))
		if not candidates:
			message = f"Cannot find the index file for folder {path}"
			raise FileNotFoundError(message)
		elif len(candidates) != 1:
			message = f"Found multiple index files for folder {path}"
			raise ValueError(message)
		index_file = candidates[0]
	else:
		index_file = expected_index_file
	return index_file

def get_gd_filename(path: Path) -> Path:
	path = Path(path)
	if path.is_dir():
		result = path / "output" / "evidence" / "annotated.gd"
		if not result.exists():
			candidates = list(path.glob("**/annotated.gd"))
			if len(candidates) != 1:
				message = f"Invalid gd file path: {path}"
				raise FileNotFoundError(message)
			result = candidates[0]
	elif path.suffix == '.gd':
		result = path
	else:
		message = f"Invalid GD path: {path}"
		raise ValueError(message)
	return result

def get_vcf_filename(path: Path) -> Path:
	""" Attempts to locate the vcf file in the outputfolder generated by breseq.
		Parameters
		----------
		path: Path
			The folder generated by breseq.
		Returns
		-------
		Path
			The vcf file generated by breseq.
	"""
	logger.warning(f"Attempting to find the vcf filename using: {path}")
	if path.is_dir():
		result = path / "data" / "output.vcf"
		logger.info(f"testing whether {result} exists...")
		if not result.exists():
			candidates = list(path.glob("**/output.vcf"))
			logger.info(f"Checking whether any candidate files can be located in {path}: {candidates}")
			if len(candidates) != 1:
				message = f"Invalid vcf file path: {path}. Found these candidates: {candidates}"
				raise FileNotFoundError(message)
			result = candidates[0]
	elif path.suffix == '.vcf':
		result = path
	else:
		message = f"The VCF file path is not a vcf file: {path}"
		raise ValueError(message)
	return result

def get_summary_filename(folder:Path)->Optional[Path]:
	# Assume the folder is a breseq folder.

	expected = folder / "data" / "sumary.json"
	if not expected.exists():
		try:
			found = list(folder.glob("**/summary.json"))[0]
		except IndexError:
			found = None
	else:
		found = expected
	return found


def get_file_locations(folder: Path) -> Tuple[Path, Optional[Path], Optional[Path], Optional[Path]]:
	index_file = get_index_filename(folder)
	gd_file = get_gd_filename(folder)
	# The VCF file provides the quality and read depth.
	vcf_file = get_vcf_filename(folder)

	summary_file = get_summary_filename(folder)

	return index_file, gd_file, vcf_file, summary_file