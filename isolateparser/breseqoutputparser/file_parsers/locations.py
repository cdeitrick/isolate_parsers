""" Implements the logic to find specific files in a breseq folder."""
from pathlib import Path


def get_index_filename(path: Path) -> Path:
	path = Path(path)

	if path.suffix == '.html':
		return path

	expected_index_file = path / "output" / "index.html"

	if not expected_index_file.exists():
		candidates = list(path.glob("**/*index.html"))
		if not candidates:
			message = f"Cannot find the index file for folder {path}"
			raise FileNotFoundError(message)
		elif len(candidates) != 1:
			message = f"Found multiple index files for folder {path}"
			raise ValueError(message)
		index_file = candidates[0]
	else:
		index_file = expected_index_file
	return index_file

def get_gd_filename(path: Path) -> Path:
	path = Path(path)
	if path.is_dir():
		result = path / "output" / "evidence" / "annotated.vcf"
		if not result.exists():
			candidates = list(path.glob("**/annotated.gd"))
			if len(candidates) != 1:
				message = f"Invalid vcf file path: {path}"
				raise FileNotFoundError(message)
			result = candidates[0]
	elif path.suffix == '.gd':
		result = path
	else:
		message = f"Invalid GD path: {path}"
		raise ValueError(message)
	return result

def get_vcf_filename(path: Path) -> Path:
	""" Attempts to locate the vcf file in the outputfolder generated by breseq.
		Parameters
		----------
		path: Path
			The folder generated by breseq.
		Returns
		-------
		Path
			The vcf file generated by breseq.
	"""
	if path.is_dir():
		result = path / "data" / "output.vcf"
		if not result.exists():
			candidates = list(path.glob("**/output.vcf"))
			if len(candidates) != 1:
				message = f"Invalid vcf file path: {path}"
				raise FileNotFoundError(message)
			result = candidates[0]
	elif path.suffix == '.vcf':
		result = path
	else:
		message = f"Invalid VCF path: {path}"
		raise ValueError(message)
	return result

