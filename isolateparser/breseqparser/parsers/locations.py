""" Implements the logic to find specific files in a breseq folder."""
from pathlib import Path
from typing import Iterable, List, Optional, Tuple

from loguru import logger


def candidate_paths_index(parent: Path) -> List[Path]:
	""" Defines a set of the usual locations of the index file."""
	name = "index.html"
	candidates = [
		parent / "breseq" / "output" / name,
		parent / "breseq" / name,
		parent / "breseq_output" / "output" / name,
		parent / "output" / name,
		parent / name,
		Path(name)
	]
	return candidates


def candidate_paths_gd(parent: Path) -> List[Path]:
	name = 'annotation.gd'
	candidates = [
		parent / "output" / "evidence" / name,
		parent / "evidence" / name,
		parent / name,
		Path(name)
	]

	return candidates


def candidate_paths_vcf(parent: Path) -> List[Path]:
	""" Defines a list of paths to search through."""
	vcf_name = "output.vcf"
	paths = [
		parent / "breseq_output" / "data" / vcf_name,
		parent / "breseq_output" / vcf_name,
		parent / "breseq" / "data" / vcf_name,
		parent / "breseq" / vcf_name,
		parent / "data" / vcf_name,
		parent / vcf_name,
		Path(vcf_name)  # In case it's the vcf filename
	]
	return paths


def get_folder_breseq(parent: Path) -> Optional[Path]:
	candidates = [
		parent / "breseq",
		parent / "breseq_output",
		parent
	]
	for candidate in candidates:
		indexpath = get_filename_index(candidate)
		if indexpath and indexpath.exists():
			return candidate


def get_filename_index(path: Path, verbose: bool = False) -> Optional[Path]:
	path = Path(path)

	candidates = candidate_paths_index(path)
	candidate = filesearch(candidates, path, 'index.html')

	if candidate is None and verbose:
		message = f"Cannot find the index file for folder {path}"
		logger.warning(message)

	return candidate


def get_filename_gd(path: Path) -> Optional[Path]:
	path = Path(path)
	candidates = candidate_paths_gd(path)
	candidate = filesearch(candidates, path, "annotation.gd")
	if candidate is None:
		message = f"Could not locate the annotated gd file in '{path}'"
		logger.warning(message)
	return candidate


def get_filename_summary(folder: Path) -> Optional[Path]:
	# Assume the folder is a breseq folder.

	expected = folder / "data" / "sumary.json"
	if not expected.exists():
		try:
			found = list(folder.glob("**/summary.json"))[0]
		except IndexError:
			found = None
	else:
		found = expected
	return found


def get_filename_vcf(parent: Path) -> Optional[Path]:
	""" Attempts to locate the vcf file in the outputfolder generated by breseq.
		Parameters
		----------
		parent: Path
			The folder generated by breseq.
		Returns
		-------
		Path
			The vcf file generated by breseq.
	"""
	candidates = candidate_paths_vcf(parent)
	candidate = filesearch(candidates, parent, 'output.vcf')
	if candidate is None:
		# Could not find the file.
		message = f"Could not locate the vcf file in {parent}"
		logger.warning(message)
	return candidate


def searchcandidates(candidates: Iterable[Path]) -> Optional[Path]:
	""" Searches for the first filename in `candidates` which exists. Returns `None` if none of the paths are valid.
		Parameters
		----------
		candidates: List[Path]
			The filenames to test.
	"""
	for candidate in candidates:
		if candidate.exists():
			return candidate


def filesearch(candidates: Iterable[Path], parent: Path = None, name: str = None) -> Optional[Path]:
	""" Returns the first filename in `candidates` that exists.
		Parameters
		----------
		candidates: List[Path]
			The filenames to search through.
		parent: Path
			Should only be passed alongside `name`
		name: str; defualt None
			If given, will perform a globular search and attempt to find a filename with the name `name`. Include the extension.
	"""
	if (parent and name) and parent.name == name:
		return parent
	candidate = searchcandidates(candidates)
	if candidate is None and parent is not None and name is not None:
		candidates = parent.glob(f"**/{name}")
		candidate = filesearch(candidates)
	return candidate


def get_file_locations(folder: Path) -> Tuple[Path, Optional[Path], Optional[Path], Optional[Path]]:
	index_file = get_filename_index(folder)
	gd_file = get_filename_gd(folder)
	# The VCF file provides the quality and read depth.
	vcf_file = get_filename_vcf(folder)

	summary_file = get_filename_summary(folder)

	return index_file, gd_file, vcf_file, summary_file
