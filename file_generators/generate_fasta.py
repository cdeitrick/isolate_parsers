""" Generates an aligned fasta file with the concatenated SNPs from the variant table."""
from pathlib import Path

import pandas
from breseqparser.file_parsers.parse_gd import GDColumns


def generate_reference_sequence(snp_table: pandas.DataFrame) -> pandas.Series:
	"""
	Generates a fasta file from the full snp table for a breseq run.
	Parameters
	----------
	snp_table: pandas.DataFrame
	- `sampleName`
	- `seq id`
	- `position`
	- `ref`
	- `alt`
	"""
	snp_table = snp_table.reset_index()

	mutation_keys = zip(snp_table['seq id'].tolist(), snp_table['position'].tolist())
	unique_keys = sorted(set(mutation_keys))

	reference = snp_table.set_index(['seq id', 'position'])['ref']
	reflist = list()
	for unique_key in unique_keys:
		a, b = unique_key
		value = reference[unique_key]
		if isinstance(value, pandas.DataFrame):
			value = value.iloc[0]
		if isinstance(value, pandas.Series):
			value = value.tolist().pop()
		if isinstance(value, float):
			value = '.'
		refrow = {
			'seq id':   a,
			'position': b,
			'ref':      value
		}
		if not isinstance(refrow['ref'], str):
			print(unique_key, type(refrow['ref']))
			print(refrow['ref'])
		reflist.append(refrow)

	df = pandas.DataFrame(reflist).set_index(['seq id', 'position'])
	se = df['ref']
	se.name = 'reference'
	return se


def _parse_sample_group(sample_name: str, reference_sequence: pandas.Series, group: pandas.DataFrame) -> pandas.Series:
	""" Converts a group of rows from the output of `parse_breseqset` corresponding to a single sample.
		Parameters
		----------
		sample_name: str
			The Id for this sample.
		reference_sequence:pandas.Series
			A pandas.Series object with all reference positions available for the full breseq set.
		group: pandas.DataFrame
			A subset of the breseqset table corresponding to a single sample.
		Returns
		-------
		pandas.Series
		- Index -> `seq id`, `position`
		- Values-> `alt`
		- name  -> `sample_name`
	"""
	# Use `seq id` and `position` as indicies. These should form a unique tuple that can be mapped back to the reference.
	group = group.set_index(['seq id', 'position'])

	# We are only interested in the `alt` sequences.
	sample_alt: pandas.Series = group['alt']
	sample_alt.name = sample_name

	# Align the sample sequence to the reference.
	sample_alt, _ = sample_alt.align(reference_sequence, join = 'right')

	# The sample group only contains positions that differ from the reference. Should align to the full reference (ref for all sequences)
	sample_alt = sample_alt.where(sample_alt.notna(), other = reference_sequence)
	return sample_alt


def _convert_combined_table_to_aligned_table(snp_table: pandas.DataFrame, mutation_type:str) -> pandas.DataFrame:
	"""
		Converts the combined breseq table generated by the breseqset parser into a `pandas.DataFrame` object.
	Parameters
	----------
	snp_table: pandas.DataFrame
		The snp table generated by the breseqset parser.

	Returns
	-------
	pandas.DataFrame
		A table with rows corresponding to a single sample and columns corresponding to (`seq id`, `position`) indicies.
	"""

	snp_table = snp_table.reset_index()
	# We only care about snps.

	snp_table = snp_table[snp_table[GDColumns.mutation_category] == mutation_type]

	reference_sequence: pandas.Series = generate_reference_sequence(snp_table)

	sample_alts = [reference_sequence]
	groups = snp_table.groupby(by = 'sampleName')
	for sample_name, group in groups:
		sample_alt = _parse_sample_group(sample_name, reference_sequence, group)
		sample_alts.append(sample_alt)

	df: pandas.DataFrame = pandas.concat(sample_alts, axis = 1)

	# It is easier to iterate over rows rather than columns, so transpose the dataframe such that rows correspond to samples.
	df = df.transpose()
	return df


def generate_fasta_file(snp_table: pandas.DataFrame, filename: Path, mutation_type:str = 'nonsynonymous') -> pandas.DataFrame:
	"""Converts the variant table generated from the breseqset parser into a fasta file."""
	# Make sure `filename` is a Path
	filename = Path(filename)
	df = _convert_combined_table_to_aligned_table(snp_table, mutation_type)

	# Write the dataframe to a fasta file.
	with filename.open('w') as fasta_file:
		for index, row in df.iterrows():
			seq = "".join(row.tolist())
			fasta_file.write(f">{index}\n{seq}\n")
	return df


if __name__ == "__main__":
	from breseqset_parser import parse_breseqset

	_folder = Path("/media/cld100/FA86364B863608A1/Users/cld100/Storage/projects/lipuma/pipeline_output/")
	_whitelist = Path("/home/cld100/Documents/projects/lipuma/siblingpairA.txt")
	_whitelist = _whitelist.read_text().split('\n')
	_snp_table = parse_breseqset(_folder)

	_snp_table = _snp_table[_snp_table['Sample'].isin(_whitelist)]
	# snp_table = snp_table[snp_table['quality'] >= 30]
	_df = generate_fasta_file(_snp_table, Path(__file__).with_name("df.unfiltered.fasta"))
